----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 02.12.2022 14:51:48
-- Design Name: 
-- Module Name: CPU_RAM_21363479 - behavioural
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.std_logic_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity CPU_RAM_21363479 is
      Port ( Clock, WriteEnable : in std_logic;
             Address: in std_logic_vector (31 downto 0);
             DataIn : in std_logic_vector (31 downto 0);
             DataOut : out std_logic_vector (31 downto 0)
           );
end CPU_RAM_21363479;

architecture behavioural of CPU_RAM_21363479 is
-- we use the least significant 4 bit of the address
type RAM_array is array(0 to 127) of std_logic_vector (31 downto 0);
     signal RAM : RAM_array :=
     (
          X"0000004f", -- 000
          X"00000050", -- 001
          X"0000000a", -- 002
            --|      Opcode      |  DR   |  SA   |  SB   | test 3 instructions
              "00000000000000100"&"00011"&"00010"&"00001", -- 003
              "00000000000000101"&"00100"&"00011"&"00010", -- 004
              "00000000000000110"&"00101"&"00100"&"00011", -- 005
              "00000000000000111"&"00110"&"00101"&"00100", -- 006
              "00000000000001000"&"00111"&"00110"&"00101", -- 007
              "00000000000000000"&"11111"&"00000"&"11011", -- 008
          X"00000058", -- 009
          
          --|      Opcode      |  DR   |  SA   |  SB   | processor test program
            "00000000000010010"&"00000"&"00000"&"00000", -- 010 Load R00 with RAM43
          X"0000002B", -- 011
            "00000000000010010"&"00001"&"00000"&"00000", -- 012 Load R01 with RAM44
          X"0000002C", -- 013
            "00000000000010010"&"00010"&"00000"&"00000", -- 014 Load R02 with RAM45
          X"0000002D", -- 015
          
            "00000000000000101"&"10000"&"00000"&"01110", -- 016 Load R16 <= R00 
            "00000000000000101"&"01110"&"00001"&"01110", -- 017 Load R14 <= R01 
            "00000000000000101"&"01111"&"00010"&"01110", -- 018 Load R15 <= R02 
            
            "00000000000000110"&"10000"&"10000"&"01110", -- 019 R16 <= A OR B 
            "00000000000000100"&"10000"&"10000"&"01110", -- 020 R16 <= A XOR B
            "00000000000001000"&"10000"&"10000"&"01110", -- 021 R16 <= A AND B
                                                                
            "00000000000001111"&"10000"&"10000"&"01110", -- 022 R16 <= A + B + 1
            "00000000000001101"&"01110"&"10000"&"01110", -- 023 R14 <= sr B    
            "00000000000001110"&"10000"&"10000"&"01110", -- 024 R16 <= A + not(B)  
            "00000000000000111"&"01110"&"10000"&"01110", -- 025 R14 <= sl B    
            "00000000000001100"&"10000"&"10000"&"01110", -- 026 R16 <= A + not B + 1
            "00000000000001010"&"10000"&"10000"&"01110", -- 027 R16 <= A-1
            "00000000000000010"&"10000"&"10000"&"01110", -- 028 R16 <= not A
            "00000000000010000"&"10000"&"10000"&"01110", -- 029 R16 <= A + B
            "00000000000000011"&"10000"&"10000"&"01110", -- 030 R16 <= A + 1
            
            "00000000000010101"&"11111"&"01111"&"10110", -- 031 branch back to RAM022 if Z is not set
            
            "00000000000010001"&"00000"&"10000"&"10000", -- 032 store the zero in RAM00
          
          
          X"00000069", -- 033
          X"00000070", -- 034
          X"00000071", -- 035
          X"00000072", -- 036
          X"00000074", -- 037
          X"00000075", -- 038
          X"00000076", -- 039
          X"00000077", -- 040
          X"00000078", -- 041
          X"00000079", -- 042
          
          X"0000007a", -- 043 --values for processor test
          X"00000058", -- 044
          X"00000016", -- 045
          
          X"0000007d", -- 046
          X"0000007e", -- 047
          X"0000007f", -- 048
          X"00000080", -- 049
          X"00000081", -- 050
          X"00000082", -- 051
          X"00000083", -- 052
          X"00000084", -- 053
          X"00000085", -- 054
          X"00000086", -- 055
          X"00000087", -- 056
          X"00000088", -- 057
          X"00000089", -- 058
          X"0000008a", -- 059
          X"0000008b", -- 060
          X"0000008c", -- 061
          X"0000008d", -- 062
          X"0000008e", -- 063
          X"0000008f", -- 064
          X"00000090", -- 065
          X"00000091", -- 066
          X"00000092", -- 067
          X"00000093", -- 068
          X"00000094", -- 069
          X"00000095", -- 070
          X"00000096", -- 071
          X"00000097", -- 072
          X"00000098", -- 073
          X"00000099", -- 074
          X"0000009a", -- 075
          X"0000009b", -- 076
          X"0000009c", -- 077
          X"0000009d", -- 078
          X"0000009e", -- 079
          X"0000009f", -- 080
          X"000000a0", -- 081
          X"000000a1", -- 082
          X"000000a2", -- 083
          X"000000a3", -- 084
          X"000000a4", -- 085
          X"000000a5", -- 086
          X"000000a6", -- 087
          X"000000a7", -- 088
          X"000000a8", -- 089
          X"000000a9", -- 090
          X"000000aa", -- 091
          X"000000ab", -- 092
          X"000000ac", -- 093
          X"000000ad", -- 094
          X"000000ae", -- 095
          X"000000af", -- 096
          X"000000b0", -- 097
          X"000000b1", -- 098
          X"000000b2", -- 099
          
         --|      Opcode      |  DR   |  SA   |  SB   | -- start instructions here
           "00000000000010010"&"00000"&"00000"&"00000", -- 100, Load Test, working
          X"00000009", -- 101
          
           "00000000000000010"&"00001"&"00000"&"00000", -- 102 not A test, working
           "00000000000000011"&"00010"&"00000"&"00000", -- 103 A+1 test, working
           "00000000000000100"&"00011"&"00000"&"00010", -- 104 A XOR B test, working       
           "00000000000000101"&"00100"&"00000"&"00011", -- 105 A test, working
           "00000000000000110"&"00101"&"00000"&"00001", -- 106 A OR B test, working
           "00000000000000111"&"00110"&"00000"&"00000", -- 107 sl B test, working
           "00000000000001000"&"00111"&"00000"&"00001", -- 108 A AND B test, working
           "00000000000001001"&"01000"&"00000"&"00001", -- 109 B test, working
           "00000000000001010"&"01001"&"00000"&"00000", -- 110 A-1 test, working
           "00000000000001011"&"01010"&"00000"&"00000", -- 111 A test 2, working
           "00000000000001100"&"01011"&"00000"&"01001", -- 112 A + not B + 1 test, working
           "00000000000001101"&"01100"&"00000"&"00000", -- 113 sr B test, working
           "00000000000001110"&"01101"&"00000"&"01100", -- 114 A + not B test, working
           "00000000000001111"&"01110"&"01100"&"01100", -- 115 A + B + 1 test, working 
           "00000000000010000"&"01111"&"01100"&"01100", -- 116 A + B test, working
           
           "00000000000010001"&"00000"&"00011"&"00000", -- 117 Store Test, working
           
           "00000000000010010"&"10000"&"00000"&"00000", -- 118, Load - Branch Test
          X"00000002", -- 119
           "00000000000010100"&"11100"&"10000"&"10001", -- 120, Branch, working
          
          X"000000c8", -- 121
          X"000000c9", -- 122
          X"000000ca", -- 123
          X"000000cb", -- 124
          X"000000cc", -- 125
          X"000000cd", -- 126
          X"000000ce"  -- 127

     );

begin

    process (Clock)
    begin
    
    if Clock'event and Clock='1' then
        if WriteEnable='1' then
            RAM(to_integer(unsigned(Address(6 downto 0)))) <= DataIn after 2ns;
        end if;
    end if;
    end process;
    DataOut <= RAM(to_integer(unsigned(Address(6 downto 0)))) after 2ns;


end behavioural;
